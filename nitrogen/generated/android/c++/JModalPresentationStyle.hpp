///
/// JModalPresentationStyle.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "ModalPresentationStyle.hpp"

namespace margelo::nitro::inappbrowser {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "ModalPresentationStyle" and the the Kotlin enum "ModalPresentationStyle".
   */
  struct JModalPresentationStyle final: public jni::JavaClass<JModalPresentationStyle> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/inappbrowser/ModalPresentationStyle;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum ModalPresentationStyle.
     */
    [[maybe_unused]]
    ModalPresentationStyle toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<ModalPresentationStyle>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JModalPresentationStyle> fromCpp(ModalPresentationStyle value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldAUTOMATIC = clazz->getStaticField<JModalPresentationStyle>("AUTOMATIC");
      static const auto fieldFULLSCREEN = clazz->getStaticField<JModalPresentationStyle>("FULLSCREEN");
      static const auto fieldPAGESHEET = clazz->getStaticField<JModalPresentationStyle>("PAGESHEET");
      
      switch (value) {
        case ModalPresentationStyle::AUTOMATIC:
          return clazz->getStaticFieldValue(fieldAUTOMATIC);
        case ModalPresentationStyle::FULLSCREEN:
          return clazz->getStaticFieldValue(fieldFULLSCREEN);
        case ModalPresentationStyle::PAGESHEET:
          return clazz->getStaticFieldValue(fieldPAGESHEET);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::runtime_error("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::inappbrowser
