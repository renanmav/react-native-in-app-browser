///
/// SFSafariViewControllerPresentParams.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `SFSafariViewControllerPresentParams`, backed by a C++ struct.
 */
public typealias SFSafariViewControllerPresentParams = margelo.nitro.inappbrowser.SFSafariViewControllerPresentParams

public extension SFSafariViewControllerPresentParams {
  private typealias bridge = margelo.nitro.inappbrowser.bridge.swift

  /**
   * Create a new instance of `SFSafariViewControllerPresentParams`.
   */
  init(url: String, modalPresentationStyle: ModalPresentationStyle?) {
    self.init(std.string(url), { () -> bridge.std__optional_ModalPresentationStyle_ in
      if let actualValue = modalPresentationStyle {
        return bridge.create_std__optional_ModalPresentationStyle_(actualValue)
      } else {
        return .init()
      }
    }())
  }

  var url: String {
    @inline(__always)
    get {
      return String(self.__url)
    }
    @inline(__always)
    set {
      self.__url = std.string(newValue)
    }
  }
  
  var modalPresentationStyle: ModalPresentationStyle? {
    @inline(__always)
    get {
      return self.__modalPresentationStyle.value
    }
    @inline(__always)
    set {
      self.__modalPresentationStyle = { () -> bridge.std__optional_ModalPresentationStyle_ in
        if let actualValue = newValue {
          return bridge.create_std__optional_ModalPresentationStyle_(actualValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
