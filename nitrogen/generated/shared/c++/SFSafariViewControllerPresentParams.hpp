///
/// SFSafariViewControllerPresentParams.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ModalPresentationStyle` to properly resolve imports.
namespace margelo::nitro::inappbrowser { enum class ModalPresentationStyle; }

#include <string>
#include <optional>
#include "ModalPresentationStyle.hpp"

namespace margelo::nitro::inappbrowser {

  /**
   * A struct which can be represented as a JavaScript object (SFSafariViewControllerPresentParams).
   */
  struct SFSafariViewControllerPresentParams {
  public:
    std::string url     SWIFT_PRIVATE;
    std::optional<ModalPresentationStyle> modalPresentationStyle     SWIFT_PRIVATE;

  public:
    explicit SFSafariViewControllerPresentParams(std::string url, std::optional<ModalPresentationStyle> modalPresentationStyle): url(url), modalPresentationStyle(modalPresentationStyle) {}
  };

} // namespace margelo::nitro::inappbrowser

namespace margelo::nitro {

  using namespace margelo::nitro::inappbrowser;

  // C++ SFSafariViewControllerPresentParams <> JS SFSafariViewControllerPresentParams (object)
  template <>
  struct JSIConverter<SFSafariViewControllerPresentParams> {
    static inline SFSafariViewControllerPresentParams fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return SFSafariViewControllerPresentParams(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "url")),
        JSIConverter<std::optional<ModalPresentationStyle>>::fromJSI(runtime, obj.getProperty(runtime, "modalPresentationStyle"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const SFSafariViewControllerPresentParams& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "url", JSIConverter<std::string>::toJSI(runtime, arg.url));
      obj.setProperty(runtime, "modalPresentationStyle", JSIConverter<std::optional<ModalPresentationStyle>>::toJSI(runtime, arg.modalPresentationStyle));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "url"))) return false;
      if (!JSIConverter<std::optional<ModalPresentationStyle>>::canConvert(runtime, obj.getProperty(runtime, "modalPresentationStyle"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
